create database p_1;
use p_1;

/* the TASK (generated by broGPT):
You are working with the clients, banks, accounts, bank_fees, transactions, and tr_states tables. 
Your goal is to create an advanced report that summarizes the transaction activity of clients with a Medium or High 
risk level. For each client, provide details on their total transaction volume, the number of transactions, 
the total fees theyâ€™ve paid.*/

-- creating 
create table clients (
    client_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    address VARCHAR(255),
    risk_level SMALLINT -- from 1 to 10
);

create table banks(
	bin_6 VARCHAR(6) PRIMARY KEY,
	bank_name VARCHAR (200),
	country VARCHAR (150)
);


create table accounts(
	iban VARCHAR(29) PRIMARY KEY,
	type_acc VARCHAR(10), -- "M" = merchant or "NM" - non-merchant
	client_id INT,
	bin_6 VARCHAR(6),
	balance INT,
	foreign key (client_id) references clients(client_id),
	foreign key (bin_6) references banks(bin_6)
);

create table bank_fees(
	fee_id INT AUTO_INCREMENT PRIMARY KEY,
	bin_6 VARCHAR(6),
	flat_fee_per_tr DECIMAL(6,3),
	foreign key (bin_6) references banks(bin_6)
);

create table transactions(
	transaction_id INT AUTO_INCREMENT PRIMARY KEY,
	iban_buyer VARCHAR(29),
	iban_merchant VARCHAR(29),
	amount INT,
	pot DATETIME DEFAULT NOW(),
	foreign key (iban_buyer) references accounts(iban),
	foreign key (iban_merchant) references accounts(iban)
);

create table tr_states(
	transaction_id INT,
	state VARCHAR(50),
	foreign key (transaction_id) references transactions(transaction_id)
);

-- inserting
INSERT INTO clients (first_name, last_name, address, risk_level)
VALUES 
('John', 'Doe', '123 Elm St.', 7),
('Jane', 'Smith', '456 Oak St.', 5),
('Emily', 'Johnson', '789 Pine St.', 8),
('Michael', 'Brown', '654 Cedar St.', 4),
('Jessica', 'Jones', '321 Maple Ave.', 6),
('David', 'Williams', '789 Birch Ln.', 9),
('Sarah', 'Miller', '112 Spruce Dr.', 3),
('Robert', 'Davis', '456 Walnut Blvd.', 7),
('Laura', 'Wilson', '234 Sycamore Rd.', 5),
('Daniel', 'Taylor', '987 Aspen Ave.', 6),
('Olivia', 'Anderson', '123 Palm St.', 8),
('James', 'Thomas', '678 Pinecone Ct.', 5),
('Emma', 'Martinez', '432 Oakridge St.', 9),
('William', 'Garcia', '876 Redwood Dr.', 4),
('Sophia', 'Lopez', '567 Pinecrest Ln.', 2),
('Alexander', 'Hernandez', '234 Willow St.', 6),
('Isabella', 'Gonzalez', '789 River Rd.', 7),
('Matthew', 'Clark', '543 Oakwood Dr.', 3),
('Ava', 'Robinson', '432 Cypress Ave.', 8),
('Joshua', 'Lee', '678 Chestnut St.', 5),
('Mia', 'Walker', '789 Birchwood Ln.', 9),
('Ethan', 'Young', '876 Beech St.', 7),
('Abigail', 'King', '234 Hill St.', 5),
('Andrew', 'Wright', '321 Forest Dr.', 6),
('Charlotte', 'Scott', '678 Maplewood Ave.', 8),
('Anthony', 'Green', '123 Pinehill St.', 9),
('Madison', 'Adams', '456 Oakview Rd.', 6),
('Christopher', 'Nelson', '543 Timber St.', 7),
('Amelia', 'Baker', '876 Cedarcrest Blvd.', 4),
('Jackson', 'Hall', '234 Woodland Dr.', 5),
('Harper', 'Rivera', '789 Lakeside Dr.', 8),
('Liam', 'Campbell', '321 Mountain St.', 6),
('Ella', 'Mitchell', '987 Valley St.', 7),
('Mason', 'Perez', '654 Cliff Rd.', 3),
('Avery', 'Roberts', '123 Seaside Dr.', 9),
('Logan', 'Turner', '789 Oakleaf Dr.', 6),
('Sofia', 'Phillips', '432 Ridge Rd.', 8),
('Lucas', 'Parker', '567 Waterfall St.', 7),
('Chloe', 'Evans', '876 Bluebird Ln.', 4),
('Jackson', 'Edwards', '234 Meadow Dr.', 5),
('Aiden', 'Collins', '543 Riverbend Rd.', 9),
('Ella', 'Stewart', '321 Sunset Blvd.', 8),
('Benjamin', 'Sanchez', '789 Bay St.', 6),
('Grace', 'Morris', '432 Harbor Ln.', 7);


INSERT INTO banks (bin_6, bank_name, country)
VALUES 
('123456', 'Bank A', 'Country A'),
('654321', 'Bank B', 'Country B'),
('234567', 'Bank C', 'Country C'),
('345678', 'Bank D', 'Country D'),
('987654', 'Bank E', 'Country E');


INSERT INTO accounts (iban, type_acc, client_id, bin_6, balance)
VALUES 
('DE1234567890123456789010001', 'M', 1, '123456', 10000),
('DE1234567890123456789010002', 'NM', 1, '654321', 5000),
('DE1234567890123456789010003', 'NM', 1, '123456', 7000),
('DE1234567890123456789010004', 'M', 2, '123456', 15000),
('DE1234567890123456789010005', 'NM', 2, '654321', 8000),
('DE1234567890123456789010006', 'NM', 3, '654321', 12000),
('DE1234567890123456789010007', 'M', 3, '123456', 9000),
('DE1234567890123456789010008', 'NM', 4, '654321', 6000),
('DE1234567890123456789010009', 'M', 5, '234567', 14000),
('DE1234567890123456789010010', 'NM', 5, '654321', 11000),
('DE1234567890123456789010011', 'NM', 6, '234567', 5000),
('DE1234567890123456789010012', 'M', 6, '234567', 13000),
('DE1234567890123456789010013', 'NM', 7, '345678', 7000),
('DE1234567890123456789010014', 'M', 8, '345678', 16000),
('DE1234567890123456789010015', 'NM', 8, '345678', 5500),
('DE1234567890123456789010016', 'NM', 9, '234567', 6200),
('DE1234567890123456789010017', 'M', 10, '123456', 8000),
('DE1234567890123456789010018', 'M', 10, '345678', 13000),
('DE1234567890123456789010019', 'NM', 11, '345678', 10000),
('DE1234567890123456789010020', 'M', 12, '234567', 19000),
('DE1234567890123456789010021', 'NM', 12, '654321', 5000),
('DE1234567890123456789010022', 'M', 13, '123456', 12000),
('DE1234567890123456789010023', 'NM', 14, '654321', 8500),
('DE1234567890123456789010024', 'M', 15, '345678', 15000),
('DE1234567890123456789010025', 'NM', 15, '234567', 9000),
('DE1234567890123456789010026', 'NM', 16, '123456', 3000),
('DE1234567890123456789010027', 'M', 16, '234567', 12000),
('DE1234567890123456789010028', 'M', 17, '654321', 7000),
('DE1234567890123456789010029', 'NM', 18, '345678', 9000),
('DE1234567890123456789010030', 'M', 19, '123456', 11000),
('DE1234567890123456789010031', 'M', 20, '654321', 8000),
('DE1234567890123456789010032', 'NM', 21, '345678', 5000),
('DE1234567890123456789010033', 'M', 22, '234567', 9000),
('DE1234567890123456789010034', 'NM', 23, '123456', 4000),
('DE1234567890123456789010035', 'M', 24, '654321', 15000),
('DE1234567890123456789010036', 'NM', 24, '345678', 8000),
('DE1234567890123456789010037', 'NM', 25, '123456', 3000),
('DE1234567890123456789010038', 'M', 26, '234567', 12000),
('DE1234567890123456789010039', 'M', 27, '654321', 14000),
('DE1234567890123456789010040', 'NM', 28, '345678', 6500),
('DE1234567890123456789010041', 'NM', 29, '123456', 4500),
('DE1234567890123456789010042', 'M', 30, '654321', 16000),
('DE1234567890123456789010043', 'NM', 31, '234567', 5000),
('DE1234567890123456789010044', 'M', 32, '345678', 7000),
('DE1234567890123456789010045', 'M', 33, '123456', 11000),
('DE1234567890123456789010046', 'NM', 34, '654321', 6000),
('DE1234567890123456789010047', 'NM', 35, '345678', 5000),
('DE1234567890123456789010048', 'M', 36, '123456', 9000),
('DE1234567890123456789010049', 'NM', 37, '654321', 12000),
('DE1234567890123456789010050', 'M', 38, '345678', 10000);
 
INSERT INTO transactions (iban_buyer, iban_merchant, amount)
VALUES 
('DE1234567890123456789010001', 'DE1234567890123456789010002', 1644),
('DE1234567890123456789010001', 'DE1234567890123456789010003', 2273),
('DE1234567890123456789010004', 'DE1234567890123456789010005', 100),
('DE1234567890123456789010006', 'DE1234567890123456789010007', 456),
('DE1234567890123456789010008', 'DE1234567890123456789010009', 675),
('DE1234567890123456789010010', 'DE1234567890123456789010011', 40),
('DE1234567890123456789010012', 'DE1234567890123456789010013', 50005),
('DE1234567890123456789010014', 'DE1234567890123456789010015', 567),
('DE1234567890123456789010016', 'DE1234567890123456789010017', 5500),
('DE1234567890123456789010018', 'DE1234567890123456789010019', 6000),
('DE1234567890123456789010020', 'DE1234567890123456789010021', 6556),
('DE1234567890123456789010022', 'DE1234567890123456789010023', 7056),
('DE1234567890123456789010024', 'DE1234567890123456789010025', 7500),
('DE1234567890123456789010026', 'DE1234567890123456789010027', 8999),
('DE1234567890123456789010028', 'DE1234567890123456789010029', 8500),
('DE1234567890123456789010030', 'DE1234567890123456789010031', 9888),
('DE1234567890123456789010032', 'DE1234567890123456789010033', 9500),
('DE1234567890123456789010034', 'DE1234567890123456789010035', 1550),
('DE1234567890123456789010036', 'DE1234567890123456789010037', 14656),
('DE1234567890123456789010038', 'DE1234567890123456789010039', 11000),
('DE1234567890123456789010040', 'DE1234567890123456789010041', 11500),
('DE1234567890123456789010042', 'DE1234567890123456789010043', 12472),
('DE1234567890123456789010044', 'DE1234567890123456789010045', 12585),
('DE1234567890123456789010046', 'DE1234567890123456789010047', 13000),
('DE1234567890123456789010048', 'DE1234567890123456789010049', 13544),
('DE1234567890123456789010050', 'DE1234567890123456789010001', 140),
('DE1234567890123456789010002', 'DE1234567890123456789010003', 160),
('DE1234567890123456789010004', 'DE1234567890123456789010005', 1800),
('DE1234567890123456789010006', 'DE1234567890123456789010007', 2020),
('DE1234567890123456789010008', 'DE1234567890123456789010009', 22022),
('DE1234567890123456789010010', 'DE1234567890123456789010011', 2404),
('DE1234567890123456789010012', 'DE1234567890123456789010013', 2640),
('DE1234567890123456789010014', 'DE1234567890123456789010015', 28050),
('DE1234567890123456789010016', 'DE1234567890123456789010017', 3000),
('DE1234567890123456789010018', 'DE1234567890123456789010019', 3230),
('DE1234567890123456789010020', 'DE1234567890123456789010021', 3400),
('DE1234567890123456789010022', 'DE1234567890123456789010023', 3600),
('DE1234567890123456789010024', 'DE1234567890123456789010025', 380),
('DE1234567890123456789010026', 'DE1234567890123456789010027', 4889),
('DE1234567890123456789010028', 'DE1234567890123456789010029', 4200),
('DE1234567890123456789010030', 'DE1234567890123456789010031', 4400),
('DE1234567890123456789010032', 'DE1234567890123456789010033', 4600),
('DE1234567890123456789010034', 'DE1234567890123456789010035', 4800),
('DE1234567890123456789010036', 'DE1234567890123456789010037', 4999),
('DE1234567890123456789010038', 'DE1234567890123456789010039', 5200),
('DE1234567890123456789010040', 'DE1234567890123456789010041', 5400),
('DE1234567890123456789010042', 'DE1234567890123456789010043', 5600),
('DE1234567890123456789010044', 'DE1234567890123456789010045', 5800),
('DE1234567890123456789010046', 'DE1234567890123456789010047', 6456),
('DE1234567890123456789010048', 'DE1234567890123456789010049', 6200),
('DE1234567890123456789010050', 'DE1234567890123456789010001', 6400),
('DE1234567890123456789010002', 'DE1234567890123456789010003', 6643),
('DE1234567890123456789010004', 'DE1234567890123456789010005', 6800),
('DE1234567890123456789010006', 'DE1234567890123456789010007', 7499),
('DE1234567890123456789010008', 'DE1234567890123456789010009', 7200),
('DE1234567890123456789010010', 'DE1234567890123456789010011', 7443),
('DE1234567890123456789010012', 'DE1234567890123456789010013', 7600),
('DE1234567890123456789010014', 'DE1234567890123456789010015', 78),
('DE1234567890123456789010016', 'DE1234567890123456789010017', 8000),
('DE1234567890123456789010018', 'DE1234567890123456789010019', 80),
('DE1234567890123456789010020', 'DE1234567890123456789010021', 8400),
('DE1234567890123456789010022', 'DE1234567890123456789010023', 8600),
('DE1234567890123456789010024', 'DE1234567890123456789010025', 8800),
('DE1234567890123456789010026', 'DE1234567890123456789010027', 9000),
('DE1234567890123456789010028', 'DE1234567890123456789010029', 9200),
('DE1234567890123456789010030', 'DE1234567890123456789010031', 9400),
('DE1234567890123456789010032', 'DE1234567890123456789010033', 9600),
('DE1234567890123456789010034', 'DE1234567890123456789010035', 9800),
('DE1234567890123456789010036', 'DE1234567890123456789010037', 10000),
('DE1234567890123456789010038', 'DE1234567890123456789010039', 10200),
('DE1234567890123456789010040', 'DE1234567890123456789010041', 10400);

INSERT INTO bank_fees (bin_6, flat_fee_per_tr)
VALUES
    ('123456', 0.025),
    ('654321', 0.030),
    ('234567', 0.035),
    ('345678', 0.040),
    ('987654', 0.020);

INSERT INTO tr_states (transaction_id, state)
VALUES 
(1, 'COMPLETED'),
(2, 'COMPLETED'),
(3, 'COMPLETED'),
(4, 'COMPLETED'),
(5, 'COMPLETED'),
(6, 'COMPLETED'),
(7, 'COMPLETED'),
(8, 'COMPLETED'),
(9, 'COMPLETED'),
(10, 'COMPLETED'),
(11, 'COMPLETED'),
(12, 'COMPLETED'),
(13, 'COMPLETED'),
(14, 'COMPLETED'),
(15, 'COMPLETED'),
(16, 'COMPLETED'),
(17, 'COMPLETED'),
(18, 'COMPLETED'),
(19, 'COMPLETED'),
(20, 'COMPLETED'),
(21, 'COMPLETED'),
(22, 'COMPLETED'),
(23, 'COMPLETED'),
(24, 'COMPLETED'),
(25, 'COMPLETED'),
(26, 'COMPLETED'),
(27, 'COMPLETED'),
(28, 'COMPLETED'),
(29, 'COMPLETED'),
(30, 'COMPLETED'),
(31, 'COMPLETED'),
(32, 'COMPLETED'),
(33, 'COMPLETED'),
(34, 'COMPLETED'),
(35, 'COMPLETED'),
(36, 'COMPLETED'),
(37, 'COMPLETED'),
(38, 'COMPLETED'),
(39, 'COMPLETED'),
(40, 'COMPLETED'),
(41, 'COMPLETED'),
(42, 'COMPLETED'),
(43, 'COMPLETED'),
(44, 'COMPLETED'),
(45, 'COMPLETED'),
(46, 'COMPLETED'),
(47, 'COMPLETED'),
(48, 'COMPLETED'),
(49, 'COMPLETED'),
(50, 'COMPLETED'),
(51, 'COMPLETED'),
(52, 'COMPLETED'),
(53, 'COMPLETED'),
(54, 'COMPLETED'),
(55, 'COMPLETED'),
(56, 'COMPLETED'),
(57, 'COMPLETED'),
(58, 'COMPLETED'),
(59, 'COMPLETED'),
(60, 'COMPLETED'),
(61, 'PENDING'),
(62, 'FAILED'),
(63, 'COMPLETED'),
(64, 'PENDING'),
(65, 'COMPLETED'),
(66, 'CANCELLED'),
(67, 'COMPLETED'),
(68, 'FAILED'),
(69, 'COMPLETED'),
(70, 'PENDING'),
(71, 'FAILED');

with atr as
(
SELECT t.transaction_id, a.iban, (t.amount * (-1)) as amount, t.pot, a.type_acc, a.client_id, a.bin_6
from transactions t
left join accounts a
on t.iban_buyer = a.iban

union all

SELECT t.transaction_id, a.iban, t.amount, t.pot, a.type_acc, a.client_id, a.bin_6
from transactions t
left join accounts a
on t.iban_merchant = a.iban
),

catr as
(
SELECT amounts.transaction_id, amounts.iban, amounts.amount, amounts.pot, amounts.type_acc, amounts.client_id, amounts.bin_6,
		concat(c.first_name,' ',c.last_name) as full_name,        
		case 
         when c.risk_level > 7 THEN 'High'
         when c.risk_level < 4 THEN 'Low'
         else 'Medium'
        end as risk_level
from atr amounts
left join clients c
on c.client_id = amounts.client_id
),

catrs as
(
SELECT catr.transaction_id, catr.iban, catr.amount, catr.pot, catr.type_acc, catr.client_id, catr.bin_6,
	 catr.full_name,  catr.risk_level, s.state
from catr 
left join tr_states s
on catr.transaction_id = s.transaction_id
where s.state = "Completed"
),

f_all as
(
select catrs.transaction_id, catrs.iban, catrs.amount, (catrs.amount - catrs.amount*f.flat_fee_per_tr) as amount_f, catrs.pot, catrs.type_acc, catrs.client_id, catrs.bin_6,
	 catrs.full_name,  catrs.risk_level, catrs.state, f.flat_fee_per_tr, abs(f.flat_fee_per_tr*catrs.amount) as fees_paid
from catrs 
left join bank_fees f
on catrs.bin_6 = f.bin_6
)

SELECT full_name, count(*) as number_of_transactions, sum(abs(amount_f)) as transaction_volume, sum(fees_paid) as fees_paid, sum(amount_f) as profit_or_loss,
		case when sum(amount_f)<0 then "loss"
		     when sum(amount_f)>0 then "profit"
			 else "zero"
		end as res
from f_all
group by full_name
order by transaction_volume DESC
limit 200;





